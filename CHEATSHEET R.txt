1. Data Types

   Character
   Numeric
   Logical
   Integer
   Complex


2. Arrays
    
    2.1 Declaration

    arrayName <- array(data, dim = (row_Size, column_Size), dimnames)
    
    #Define 2D array
    arrayName <- array(c(1,2,3,4), dim = c(2,2))

    #To access a specific item in the array
    arrayName <- array(c(1,2,3,4), dim = c(2,2))
    firstNumber <- arrayName [1][1]
    arrayName[1][1] = 3

    2.3 Array Operations
    
    #We can do calculations across the elements in an array using the apply() function
    apply(arrayName, margin, fun)
    
    #Sort array by row wise 
    apply(arrayName, 1, sort)

    #Sum array by row wise 
    apply(arrayName, 1, sum)

3.  String Operations

    #To concatenate between strings, use the plus operator:
    firstName <- "Nabil"
    lastName <- "Ahmad"
    fullName <- paste(firstName,lastName, sep = " ")

    #To lower case 
    tolower(fullName)

    #To upper case
    toupper(fullName)

    #ToString function
    #It converts an object to its string representation so that it is suitable for display
    toString(object)

    #Substring
    #Returns a part of the string, beginning and ending from the index specified as the argument.
    substr(fullName, 7, 11)

    #Replace
    sub("Ahmad", "Ali", fullName)

    # Changes only the 1st pattern match per string
    sub('pattern', replacement, input) 

    # Changes every occurrence of a pattern match
    gsub('pattern', replacement, input) 
    
4. DateTime

   #Current Data and time
   date()

   #Convert to Date
   dates <- c("05/27/84", "07/07/05")
   betterDates <- as.Date(dates, format = "%m/%d/%y")

5. Formatting values
   
   5.1 Numeric
   
   format(12345.6789, digits=9, decimal.mark=",", big.mark=" ",small.mark=".", , small.interval=3)

   5.2 String
 
   hour <- 8
   mins1 <- 0
   mins2 <- 5
   sprintf("I woke up at %s:%s%s a.m.", hour, mins1, mins2)

6. R compiler at Command Line
 
   R.exe 
   Rscript a.R -> output pf a.R print on the terminal

7. Control flow statements 

   9.1 Switch

   switch(expression, case1, case2, case3....)

   9.2 If

   if (test_expression) {
      statement1
   } else {
      statement2
   }

8. Loop

   8.1 While

   while (test_expression)
   {
      statement
   }

   8.2 Do While

   repeat{
      statements...
      if(condition){
         break
      }
   }

   8.3 For Loop

   for (val in sequence)
   {
     statement
   }

9. Class Definition 

   # Create the first quadrant class

   # This is used to represent a coordinate in the first quadrant.

    FirstQuadrant <- setClass(
        # Set the name for the class
        "FirstQuadrant",

        # Define the slots
        slots = c(
                x = "numeric",
                y = "numeric"
                ),

        # Set the default values for the slots. (optional)
        prototype=list(
                x = 0.0,
                y = 0.0
                ),

        # Make a function that can test to see if the data is consistent.
        # This is not called if you have an initialize function defined!
        validity=function(object)
        {
                if((object@x < 0) || (object@y < 0)) {
                        return("A negative number for one of the coordinates was given.")
                }
                return(TRUE)
        }
        )

10. Enum

   colorEnum <- function() {
      list(BLUE = "BLUE", RED = "RED", BLACK = "BLACK")
   }   

11. Events

   Key press
   Mouse Click

   process.events()